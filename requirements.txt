certifi==2018.10.15
chardet==3.0.4
Django==2.1
django-crispy-forms==1.7.2
idna==2.7
Pillow==5.2.0
pytz==2018.5
requests==2.19.1
urllib3==1.23




def get_encoded_faces():
    encoded = {}

    for dirpath, dnames, fnames in os.walk("media/uploads/"):
        for f in fnames:
            if f.endswith(".jpg") or f.endswith(".png"):
                face = fr.load_image_file("media/uploads/" + f)
                encoding = fr.face_encodings(face)[0]
                encoded[f.split(".")[0]] = encoding

    return encoded


def unknown_image_encoded(img):
    face = fr.load_image_file("media/uploads/")
    encoding = fr.face_encodings(face)[0]

    return encoding


def classify_face(img):
    faces = get_encoded_faces()
    faces_encoded = list(faces.values())
    known_face_names = list(faces.keys())

    face = fr.load_image_file("media/uploads/")
    unknown_face_encodings = fr.face_encodings(face)[0]

    face_names = []
    for face_encoding in unknown_face_encodings:
        # See if the face is a match for the known face(s)
        matches = face_recognition.compare_faces(faces_encoded, face_encoding)
        name = "Unknown"

        # use the known face with the smallest distance to the new face
        face_distances = face_recognition.face_distance(faces_encoded, face_encoding)
        best_match_index = np.argmin(face_distances)
        if matches[best_match_index]:
            name = known_face_names[best_match_index]

        face_names.append(name)

    return face_names 

